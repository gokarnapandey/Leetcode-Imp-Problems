class Solution {

    // Helper method to recursively build the BST from the sorted array
    private TreeNode insertToBST(int[] arr, int start, int end) {
        // Base case: if the subarray is empty, return null
        if (start > end) {
            return null;
        }

        // Find the middle element of the current subarray
        int mid = start + ((end - start) / 2);

        // Create a new TreeNode with the middle element
        TreeNode tree = new TreeNode(arr[mid]);

        // Recursively construct the left subtree using the left half of the array
        tree.left = insertToBST(arr, start, mid - 1);

        // Recursively construct the right subtree using the right half of the array
        tree.right = insertToBST(arr, mid + 1, end);

        // Return the current node as the root of this subtree
        return tree;
    }

    // Main method to be called: converts the sorted array into a balanced BST
    public TreeNode sortedArrayToBST(int[] nums) {
        // Start the recursive construction from the full array
        return insertToBST(nums, 0, nums.length - 1);
    }
}
