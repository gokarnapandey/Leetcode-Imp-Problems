You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
Find two lines that together with the x-axis form a container, such that the container contains the most water.
Return the maximum amount of water a container can store.

Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

Example 2:
Input: height = [1,1]
Output: 1
 
Constraints:
n == height.length
2 <= n <= 105
0 <= height[i] <= 104


Brute Force Solution:

class Solution {
    public int maxArea(int[] arr) {
        int area = 0;
        int n = arr.length;
        for(int i=0; i<n-1; i++){
            for(int j=i+1; j<n; j++){
                int mn = Math.min(arr[i], arr[j]);
                int currArea = (j-i) * mn;
                area = Math.max(currArea, area);
            }
        }
        return area;
    }
}

Optimized Approach:

Steps to Approach the Problem
Initialize pointers: Set i = 0 and j = n - 1.
Initialize maximum area: Set area = 0.
Iterate while pointers don’t meet: Use while(i < j).
Calculate the width: width = j - i.
Find the minimum height: height = min(arr[i], arr[j]).
Calculate the area: area = width × height.
Update maximum area: area = max(area, currArea).
Move the pointer with the smaller height:
If arr[i] < arr[j], increment i++.
Else, decrement j--.
Return the maximum area.

code:
class Solution {
    public int maxArea(int[] arr) {
        int area = 0;
        int n = arr.length;
        int i = 0;
        int j = arr.length - 1;
        while(i<j){
            int width = j - i;
            int height = Math.min(arr[i], arr[j]);
            int currArea = width * height;
            area = Math.max(currArea, area);
            if(arr[i] > arr[j]){
                j--;
            }else{
                i++;
            }
        }
        return area;
    }
}
